[
    {
        "id": "6c4187d2071ea8bf",
        "type": "tab",
        "label": "Sensor read flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3817572bbfa6827f",
        "type": "tab",
        "label": "Sensor query flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8412b8566e09eeba",
        "type": "tab",
        "label": "Sprinkler end flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a766c2c7dc7153c7",
        "type": "tab",
        "label": "Config flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a2ae0e30dd64e67f",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.eclipseprojects.io",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "7ec59de7e71ba8f5",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.emqx.io",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "6f676c63fa346cce",
        "type": "mqtt in",
        "z": "6c4187d2071ea8bf",
        "name": "",
        "topic": "agh/iot/project9/sensor/+/humidity",
        "qos": "2",
        "datatype": "auto",
        "broker": "7ec59de7e71ba8f5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 80,
        "wires": [
            [
                "f96c784df937b7aa"
            ]
        ]
    },
    {
        "id": "48a54cb9abfa582c",
        "type": "function",
        "z": "6c4187d2071ea8bf",
        "name": "Read sector",
        "func": "var ret = [];\n\nvar sector;\nfor (const sector of global.get(\"config\").sectors){\n    if (sector.sensor_id == msg.sensor_id){\n        msg.sector = sector;\n        let x = Object.assign({}, msg);\n        ret.push(x);\n    }\n}\n\nreturn [ ret ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 200,
        "wires": [
            [
                "cf53c8521c391698"
            ]
        ]
    },
    {
        "id": "cf53c8521c391698",
        "type": "switch",
        "z": "6c4187d2071ea8bf",
        "name": "Is humidity too low?",
        "property": "sector.desired_humidity",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "payload",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 260,
        "wires": [
            [
                "5bf202d27a6f5449"
            ],
            [
                "30625f01164fa41a",
                "34313ed2c9033d86"
            ]
        ]
    },
    {
        "id": "366f302dac542942",
        "type": "debug",
        "z": "6c4187d2071ea8bf",
        "name": "humidity in sector x is fine",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"humidity in sector \" & sector.id & \" is fine\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 200,
        "wires": []
    },
    {
        "id": "30625f01164fa41a",
        "type": "debug",
        "z": "6c4187d2071ea8bf",
        "name": "humidity in sector x is too low",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"humidity in sector \" & sector.id & \" is too low\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 260,
        "wires": []
    },
    {
        "id": "743663a534792066",
        "type": "http request",
        "z": "6c4187d2071ea8bf",
        "name": "Http weather request",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "api.openweathermap.org/data/2.5/onecall?",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 760,
        "y": 380,
        "wires": [
            [
                "a50b79a0952e99ba"
            ]
        ]
    },
    {
        "id": "a50b79a0952e99ba",
        "type": "function",
        "z": "6c4187d2071ea8bf",
        "name": "Will it rain today?",
        "func": "var hourly = msg.payload.hourly;\nvar i;\nfor (i = 0; i < 24; i++){\n    if (hourly[i].weather[0].main == \"Rain\"){\n        msg.payload = true;\n        return msg;\n    }\n}\nmsg.payload = false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 440,
        "wires": [
            [
                "af3705f1ddf3208c"
            ]
        ]
    },
    {
        "id": "a2250dc6154ba11a",
        "type": "debug",
        "z": "6c4187d2071ea8bf",
        "name": "...but it's gonna rain",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"...but it's gonna rain\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 380,
        "wires": []
    },
    {
        "id": "af3705f1ddf3208c",
        "type": "switch",
        "z": "6c4187d2071ea8bf",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 440,
        "wires": [
            [
                "5309478d6d1c3889"
            ],
            [
                "86bf8ae516409c51",
                "b59bf2e4ccab87d6"
            ]
        ]
    },
    {
        "id": "86bf8ae516409c51",
        "type": "debug",
        "z": "6c4187d2071ea8bf",
        "name": "...and it's not gonna rain",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"...and it's not gonna rain\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 440,
        "wires": []
    },
    {
        "id": "34313ed2c9033d86",
        "type": "change",
        "z": "6c4187d2071ea8bf",
        "name": "Set http query paramseters",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.appid",
                "pt": "msg",
                "to": "b0259270f4921df02fdce249d00caf88",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.lat",
                "pt": "msg",
                "to": "config.lat",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "payload.lon",
                "pt": "msg",
                "to": "config.lon",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 320,
        "wires": [
            [
                "743663a534792066"
            ]
        ]
    },
    {
        "id": "b19046f7672dfcce",
        "type": "switch",
        "z": "6c4187d2071ea8bf",
        "name": "Is there a sector already running?",
        "property": "sector_running",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1340,
        "y": 580,
        "wires": [
            [
                "eb8374aa454e4142"
            ],
            [
                "f34f4c797fdf7055"
            ]
        ]
    },
    {
        "id": "eb8374aa454e4142",
        "type": "function",
        "z": "6c4187d2071ea8bf",
        "name": "Add to waiting sectors queue",
        "func": "global.get('waiting_sectors').push(msg.sector);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set('waiting_sectors', []);\nglobal.set('sector_running', false);\nglobal.set('sprinklers_running', []);\n\n// {   \n//     \"sectors\":      \n//     [       \n//         {            \n//             \"id\": \"sector_id1\",           \n//             \"sensor_id\": \"sensor_id1\",          \n//             \"desired_humidity\": 50,          \n//             \"sprinklers\":             \n//             [              \n//                 \"sprinkler_id1\", \"sprinkler_id2\"            \n//             ]        \n//         },        \n//         {            \n//             \"id\": \"sector_id2\",           \n//             \"sensor_id\": \"sensor_id2\",          \n//             \"desired_humidity\": 50,          \n//             \"sprinklers\":             \n//             [              \n//                 \"sprinkler_id3\", \"sprinkler_id4\", \"sprinkler_id5\"            \n//             ]        \n//         }     \n//     ],   \n//     \"lat\": 56,    \n//     \"lon\": 65 \n// }",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "f34f4c797fdf7055",
        "type": "function",
        "z": "6c4187d2071ea8bf",
        "name": "Activate sprinklers in sector",
        "func": "global.set('sector_running', true);\n\nlet sector = msg.sector;\n\nlet sec_sprinklers = [];\nfor(let i=0; i<sector.sprinklers.length; i++){\n    sec_sprinklers.push(sector.sprinklers[i]);\n}\nglobal.set('sprinklers_running', sec_sprinklers);\n\nreturn {'payload': sector.id};\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set('waiting_sectors', []);\nglobal.set('sector_running', false);\nglobal.set('sprinklers_running', []);\n\n// {   \n//     \"sectors\":      \n//     [       \n//         {            \n//             \"id\": \"sector_id1\",           \n//             \"sensor_id\": \"sensor_id1\",          \n//             \"desired_humidity\": 50,          \n//             \"sprinklers\":             \n//             [              \n//                 \"sprinkler_id1\", \"sprinkler_id2\"            \n//             ]        \n//         },        \n//         {            \n//             \"id\": \"sector_id2\",           \n//             \"sensor_id\": \"sensor_id2\",          \n//             \"desired_humidity\": 50,          \n//             \"sprinklers\":             \n//             [              \n//                 \"sprinkler_id3\", \"sprinkler_id4\", \"sprinkler_id5\"            \n//             ]        \n//         }     \n//     ],   \n//     \"lat\": 56,    \n//     \"lon\": 65 \n// }",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 600,
        "wires": [
            [
                "e335ee09d896f80d",
                "ef7ad097d033a63d"
            ]
        ]
    },
    {
        "id": "e335ee09d896f80d",
        "type": "mqtt out",
        "z": "6c4187d2071ea8bf",
        "name": "",
        "topic": "agh/iot/project9/active_sector",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ec59de7e71ba8f5",
        "x": 1940,
        "y": 600,
        "wires": []
    },
    {
        "id": "ef7ad097d033a63d",
        "type": "debug",
        "z": "6c4187d2071ea8bf",
        "name": "activating sector x",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"activating sector \" & payload",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1910,
        "y": 660,
        "wires": []
    },
    {
        "id": "f96c784df937b7aa",
        "type": "function",
        "z": "6c4187d2071ea8bf",
        "name": "Check and add waiting sensor",
        "func": "msg.sensor_id = msg.topic.split('/')[4];\n\nvar sensors = global.get('sensors_waiting');\nfor(let sensor of sensors){\n    if(msg.sensor_id == sensor.id){\n        return null;\n    }\n}\nvar new_sensor = {id: msg.sensor_id, sprinklers: []};\nsensors.push(new_sensor);\nglobal.set('sensors_waiting', sensors);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 140,
        "wires": [
            [
                "48a54cb9abfa582c"
            ]
        ]
    },
    {
        "id": "b59bf2e4ccab87d6",
        "type": "function",
        "z": "6c4187d2071ea8bf",
        "name": "Add sprinklers to sensor",
        "func": "var sensors = global.get('sensors_waiting');\n\nlet sector = msg.sector;\n\nfor(let sensor of sensors){\n    if(msg.sensor_id == sensor.id){\n        let sen_sprinklers = sensor.sprinklers;\n        for(let sprinkler of sector.sprinklers){\n            sen_sprinklers.push(sprinkler);\n        }\n        sensor.sprinklers = sen_sprinklers;\n    }\n}\n\nglobal.set('sensors_waiting', sensors);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 520,
        "wires": [
            [
                "b19046f7672dfcce"
            ]
        ]
    },
    {
        "id": "5309478d6d1c3889",
        "type": "function",
        "z": "6c4187d2071ea8bf",
        "name": "Remove waiting sensor",
        "func": "var sensors = global.get('sensors_waiting');\nlet index = -1;\n\nfor(let i=0; i<sensors.length; i++){\n    if(sensors[i].id == msg.sensor_id){\n        index = i;\n        break;\n    }\n}\n\nif(index > -1){\n    sensors.splice(index, 1);\n}\n\nglobal.set('sensors_waiting', sensors);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 380,
        "wires": [
            [
                "a2250dc6154ba11a"
            ]
        ]
    },
    {
        "id": "5bf202d27a6f5449",
        "type": "function",
        "z": "6c4187d2071ea8bf",
        "name": "Remove waiting sensor",
        "func": "var sensors = global.get('sensors_waiting');\nlet index = -1;\n\nfor(let i=0; i<sensors.length; i++){\n    if(sensors[i].id == msg.sensor_id){\n        index = i;\n        break;\n    }\n}\n\nif(index > -1){\n    sensors.splice(index, 1);\n}\n\nglobal.set('sensors_waiting', sensors);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 200,
        "wires": [
            [
                "366f302dac542942"
            ]
        ]
    },
    {
        "id": "a59025968c7ba032",
        "type": "inject",
        "z": "3817572bbfa6827f",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "178e7b296df6e186"
            ]
        ]
    },
    {
        "id": "178e7b296df6e186",
        "type": "mqtt out",
        "z": "3817572bbfa6827f",
        "name": "",
        "topic": "agh/iot/project9/sensor/request",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ec59de7e71ba8f5",
        "x": 410,
        "y": 80,
        "wires": []
    },
    {
        "id": "05286072f8bd0b43",
        "type": "inject",
        "z": "3817572bbfa6827f",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "request",
        "payloadType": "str",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "178e7b296df6e186"
            ]
        ]
    },
    {
        "id": "08911126f8b8a6f7",
        "type": "mqtt in",
        "z": "8412b8566e09eeba",
        "name": "",
        "topic": "agh/iot/project9/sprinkler/+/state",
        "qos": "2",
        "datatype": "auto",
        "broker": "7ec59de7e71ba8f5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 80,
        "wires": [
            [
                "800b3c7911138c43",
                "5a3248fe404aaaf2"
            ]
        ]
    },
    {
        "id": "df74992656ddfde1",
        "type": "function",
        "z": "8412b8566e09eeba",
        "name": "Remove from running list",
        "func": "let rem_sprinkler = global.get('sprinklers_running');\nlet index = -1;\nfor (let i = 0; i<rem_sprinkler.length; i++){\n    if (rem_sprinkler[i] == msg.sprinkler_id){\n        index = i;\n        break;\n    }\n}\nif (index > -1) {\n  rem_sprinkler.splice(index, 1);\n}\nglobal.set('sprinklers_running', rem_sprinkler);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set('waiting_sectors', []);\nglobal.set('sector_running', false);\nglobal.set('sprinklers_running', []);\n\n// {   \n//     \"sectors\":      \n//     [       \n//         {            \n//             \"id\": \"sector_id1\",           \n//             \"sensor_id\": \"sensor_id1\",          \n//             \"desired_humidity\": 50,          \n//             \"sprinklers\":             \n//             [              \n//                 \"sprinkler_id1\", \"sprinkler_id2\"            \n//             ]        \n//         },        \n//         {            \n//             \"id\": \"sector_id2\",           \n//             \"sensor_id\": \"sensor_id2\",          \n//             \"desired_humidity\": 50,          \n//             \"sprinklers\":             \n//             [              \n//                 \"sprinkler_id3\", \"sprinkler_id4\", \"sprinkler_id5\"            \n//             ]        \n//         }     \n//     ],   \n//     \"lat\": 56,    \n//     \"lon\": 65 \n// }",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 260,
        "wires": [
            [
                "ae49d6230495afbe"
            ]
        ]
    },
    {
        "id": "d75c55845230d25d",
        "type": "function",
        "z": "8412b8566e09eeba",
        "name": "Read sprinkler id",
        "func": "msg.sprinkler_id = msg.topic.split('/')[4];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 200,
        "wires": [
            [
                "df74992656ddfde1",
                "7a5f576d4ede0fb8"
            ]
        ]
    },
    {
        "id": "c7c9fa385d09256b",
        "type": "function",
        "z": "8412b8566e09eeba",
        "name": "Activate next sector",
        "func": "global.set('sector_running', false);\n\nif(global.get('waiting_sectors').length != 0){\n    global.set('sector_running', true);\n    let tab = global.get('waiting_sectors');\n    let message = tab.shift();\n    global.set('waiting_sectors', tab);\n    \n    let sektor = message;\n    \n    let sec_sprinklers = [];\n    for(let i=0; i<sektor.sprinklers.length; i++){\n        sec_sprinklers.push(sektor.sprinklers[i]);\n    }\n    global.set('sprinklers_running', sec_sprinklers);\n    \n    return { \"payload\": sektor.id };\n}   \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set('waiting_sectors', []);\nglobal.set('sector_running', false);\nglobal.set('sprinklers_running', []);\n\n// {   \n//     \"sectors\":      \n//     [       \n//         {            \n//             \"id\": \"sector_id1\",           \n//             \"sensor_id\": \"sensor_id1\",          \n//             \"desired_humidity\": 50,          \n//             \"sprinklers\":             \n//             [              \n//                 \"sprinkler_id1\", \"sprinkler_id2\"            \n//             ]        \n//         },        \n//         {            \n//             \"id\": \"sector_id2\",           \n//             \"sensor_id\": \"sensor_id2\",          \n//             \"desired_humidity\": 50,          \n//             \"sprinklers\":             \n//             [              \n//                 \"sprinkler_id3\", \"sprinkler_id4\", \"sprinkler_id5\"            \n//             ]        \n//         }     \n//     ],   \n//     \"lat\": 56,    \n//     \"lon\": 65 \n// }",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 500,
        "wires": [
            [
                "17c2b29ee8fc70f9",
                "4d2759e63c6fd3e3"
            ]
        ]
    },
    {
        "id": "dec4f57d739c3969",
        "type": "switch",
        "z": "8412b8566e09eeba",
        "name": "Are all sprinklers off?",
        "property": "sprinklers_running",
        "propertyType": "global",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 780,
        "y": 380,
        "wires": [
            [
                "a81ce35a8e5b4b42"
            ],
            []
        ]
    },
    {
        "id": "17c2b29ee8fc70f9",
        "type": "mqtt out",
        "z": "8412b8566e09eeba",
        "name": "",
        "topic": "agh/iot/project9/active_sector",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ec59de7e71ba8f5",
        "x": 1300,
        "y": 460,
        "wires": []
    },
    {
        "id": "4d2759e63c6fd3e3",
        "type": "debug",
        "z": "8412b8566e09eeba",
        "name": "activating sector x",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"activating sector \" & payload",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 540,
        "wires": []
    },
    {
        "id": "ae49d6230495afbe",
        "type": "function",
        "z": "8412b8566e09eeba",
        "name": "Remove from sensor sprinklers",
        "func": "var sensors = global.get('sensors_waiting');\nfor(let sensor of sensors){\n    let rem_sprinkler = sensor.sprinklers;\n    let index = -1;\n    for(let i=0; i<rem_sprinkler.length; i++){\n        if(rem_sprinkler[i] == msg.sprinkler_id){\n            index = i;\n            break;\n        }\n    }\n    if(index > -1){\n        rem_sprinkler.splice(index, 1);\n    }\n    \n    sensor.sprinklers = rem_sprinkler;\n}\nglobal.set('sensors_waiting', sensors);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 320,
        "wires": [
            [
                "dec4f57d739c3969"
            ]
        ]
    },
    {
        "id": "a81ce35a8e5b4b42",
        "type": "function",
        "z": "8412b8566e09eeba",
        "name": "Check empty sensors",
        "func": "var sensors = global.get('sensors_waiting');\nlet index = -1;\n\nfor(let i=0; i<sensors.length; i++){\n    if(sensors[i].sprinklers.length == 0){\n        index = i;\n        break;\n    }\n}\n\nif(index > -1){\n    sensors.splice(index, 1);\n}\n\nglobal.set('sensors_waiting', sensors);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 440,
        "wires": [
            [
                "c7c9fa385d09256b"
            ]
        ]
    },
    {
        "id": "800b3c7911138c43",
        "type": "debug",
        "z": "8412b8566e09eeba",
        "name": "Sprinkler On/Off",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Sprinkler on/off: \" & payload",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 80,
        "wires": []
    },
    {
        "id": "5a3248fe404aaaf2",
        "type": "switch",
        "z": "8412b8566e09eeba",
        "name": "Is off",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 270,
        "y": 140,
        "wires": [
            [
                "d75c55845230d25d"
            ]
        ]
    },
    {
        "id": "7a5f576d4ede0fb8",
        "type": "debug",
        "z": "8412b8566e09eeba",
        "name": "Sprinkler x finished",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Finish message from sprinkler \" & sprinkler_id",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 200,
        "wires": []
    },
    {
        "id": "07a0a532358b0195",
        "type": "mqtt in",
        "z": "a766c2c7dc7153c7",
        "name": "",
        "topic": "agh/iot/project9/config",
        "qos": "2",
        "datatype": "json",
        "broker": "7ec59de7e71ba8f5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 60,
        "wires": [
            [
                "d74417ebcfd0e049"
            ]
        ]
    },
    {
        "id": "d74417ebcfd0e049",
        "type": "change",
        "z": "a766c2c7dc7153c7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "global",
                "to": "payload",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "sensors_waiting",
                "pt": "global",
                "to": "[]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "28387157719ae297",
        "type": "inject",
        "z": "a766c2c7dc7153c7",
        "name": "Temporary inject for tests",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{        \"sectors\":           [                {                         \"id\": \"sector_id1\",                        \"sensor_id\": \"sensor_id1\",                       \"desired_humidity\": 50,                       \"sprinklers\":                          [                               \"sprinkler_id1\", \"sprinkler_id2\"                         ]                 },                 {                         \"id\": \"sector_id2\",                        \"sensor_id\": \"sensor_id2\",                       \"desired_humidity\": 50,                       \"sprinklers\":                          [                               \"sprinkler_id3\", \"sprinkler_id4\", \"sprinkler_id5\"                         ]                 }          ],        \"lat\": 56,         \"lon\": 65  }",
        "payloadType": "json",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "d74417ebcfd0e049"
            ]
        ]
    }
]